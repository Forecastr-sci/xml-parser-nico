renv::update()
renv:: update(rlang)
renv::update("rlang")
renv::status()
packages <- c("xml2", "argparse")
for (pack in packages) {
if (!require(pack)) {
install.packages(pack)
library(pack)
}
}
options(repos = c(CRAN = "https://cloud.r-project.org"))
packages <- c("xml2", "argparse")
for (pack in packages) {
if (!require(pack)) {
install.packages(pack)
library(pack)
}
}
install.packages(pack)
options(repos = c(CRAN = "https://cloud.r-project.org"))
packages <- c("xml2", "argparse")
for (pack in packages) {
if (!require(pack)) {
install.packages(pack)
library(pack)
}
}
library(pack)
install.packages(pack)
library(pack)
library(xml2, argparse)
library(argparse)
for (pack in packages) {
if (!require(pack)) {
install.packages(pack)
}
}
install.packages(pack)
library(xml2)
library(argparse)
packages <- c("xml2", "argparse")
library(xml2)
library(argparse)
gc()
rm()
rm(list = ls(all.names = TRUE))
PREFIX <- "df"
EXTENSION <- ".RData"
main <- function() {
parser <- argparse()
args <- commandArgs(trailingOnly = TRUE)
# print(args)
# Validate args
if (length(args) < 1) {
# -i flag with filepath will put results of script at the end of existing .RData file.
# Otherwise it'll create a new file.
stop(
"Usage: xml-parser.r <PATH_TO_FILE (xml or txt with paths to xml)> [-i file.RData] [-o filename]"
)
}
paths <- prepare_paths_for_parsing(args[1])
df <- generate_df(paths)
# Parse other CLI arguments
fname <-
sprintf("%s%s%s",
format(Sys.time(), "%Y-%m-%d_%H%M%S"),
PREFIX,
EXTENSION)
save(df, file = fname)
}
prepare_paths_for_parsing <-
function(args, valid_extensions = c("xml")) {
#` Checks for the existence of a file presented in argument.
#` If it's a txt or list file, assumes it's a list of paths,
#` checks validity of each path as xml file and adds them to the list of paths.
#` If it's an xml file, checks for it validity and adds it to the list of paths.
#` If at any point it encounters invalid path, it prompts user to continue by pressing (y)es
#` or stops the program if person pressed (n)o.
#`
#` Function returns vector of strings representing paths to be parsed
paths <- c()
if (file.exists(args)) {
extension <- tools::file_ext(args[1])
if (extension %in% valid_extensions) {
paths <- c(paths, args)
}
else if (extension == "txt" || extension == "list") {
list_ <- readLines(args)
for (el in list_) {
valid_path <- prepare_paths_for_parsing(el)
paths <- c(paths, valid_path)
}
}
} else {
warning <- sprintf("File doesn't exist or can't be parsed: %s\n")
print(warning)
to_continue <-
readline(prompt = "Do you want to quit the program to fix names?\n(y)es - quits the program, (n)o - proceeds, skipping invalid file")
# TODO: implement branching logic
}
}
xml_parse <- function(path) {
# ...
msg <- sprintf("Now parsing: %s.", path)
print(msg)
in_file <- read_xml(path)
# Get experiment name from XML
experiment_name <- xml_text(xml_child(xml_child(in_file,
search = "Image_Properties"),
search = "Image_Filename"))
# Get list of markers from XML
markers <-
xml_find_all(xml_child(in_file, search = "Marker_Data"), ".//Marker_Type")
marker_names <- c()
cell_count <- c()
for (marker in markers) {
marker_names <-
c(marker_names, xml_text(xml_child(marker, search = "Name")))
cell_count <-
c(cell_count, length(xml_find_all(marker, ".//Marker")))
marked_counts <- setNames(cell_count, marker_names)
}
# Create dataframe
df <- data.frame(t(marked_counts))
rownames(df) <- experiment_name
return(df)
}
generate_df <- function(paths) {
df <- data.frame()
for (path in paths) {
addition <- xml_parse(path)
df <- rbind(df, addition)
}
return(df)
}
main()
library(argparse)
library(xml2)
parser <- argparse()
options(repos = c(CRAN = "https://cloud.r-project.org"))
packages <- c("xml2", "argparse")
for (pack in packages) {
if (!require(pack)) {
install.packages(pack)
}
}
library(xml2)
library(argparse)
PREFIX <- "df"
EXTENSION <- ".RData"
main <- function() {
parser <- argparse()
args <- commandArgs(trailingOnly = TRUE)
# print(args)
# Validate args
if (length(args) < 1) {
# -i flag with filepath will put results of script at the end of existing .RData file.
# Otherwise it'll create a new file.
stop(
"Usage: xml-parser.r <PATH_TO_FILE (xml or txt with paths to xml)> [-i file.RData] [-o filename]"
)
}
paths <- prepare_paths_for_parsing(args[1])
df <- generate_df(paths)
# Parse other CLI arguments
fname <-
sprintf("%s%s%s",
format(Sys.time(), "%Y-%m-%d_%H%M%S"),
PREFIX,
EXTENSION)
save(df, file = fname)
}
prepare_paths_for_parsing <-
function(args, valid_extensions = c("xml")) {
#` Checks for the existence of a file presented in argument.
#` If it's a txt or list file, assumes it's a list of paths,
#` checks validity of each path as xml file and adds them to the list of paths.
#` If it's an xml file, checks for it validity and adds it to the list of paths.
#` If at any point it encounters invalid path, it prompts user to continue by pressing (y)es
#` or stops the program if person pressed (n)o.
#`
#` Function returns vector of strings representing paths to be parsed
paths <- c()
if (file.exists(args)) {
extension <- tools::file_ext(args[1])
if (extension %in% valid_extensions) {
paths <- c(paths, args)
}
else if (extension == "txt" || extension == "list") {
list_ <- readLines(args)
for (el in list_) {
valid_path <- prepare_paths_for_parsing(el)
paths <- c(paths, valid_path)
}
}
} else {
warning <- sprintf("File doesn't exist or can't be parsed: %s\n")
print(warning)
to_continue <-
readline(prompt = "Do you want to quit the program to fix names?\n(y)es - quits the program, (n)o - proceeds, skipping invalid file")
# TODO: implement branching logic
}
}
xml_parse <- function(path) {
# ...
msg <- sprintf("Now parsing: %s.", path)
print(msg)
in_file <- read_xml(path)
# Get experiment name from XML
experiment_name <- xml_text(xml_child(xml_child(in_file,
search = "Image_Properties"),
search = "Image_Filename"))
# Get list of markers from XML
markers <-
xml_find_all(xml_child(in_file, search = "Marker_Data"), ".//Marker_Type")
marker_names <- c()
cell_count <- c()
for (marker in markers) {
marker_names <-
c(marker_names, xml_text(xml_child(marker, search = "Name")))
cell_count <-
c(cell_count, length(xml_find_all(marker, ".//Marker")))
marked_counts <- setNames(cell_count, marker_names)
}
# Create dataframe
df <- data.frame(t(marked_counts))
rownames(df) <- experiment_name
return(df)
}
generate_df <- function(paths) {
df <- data.frame()
for (path in paths) {
addition <- xml_parse(path)
df <- rbind(df, addition)
}
return(df)
}
main()
parser <- argparse()
parser <- argparse(
description = "Example command-line option parser",
usage = "%prog <filename> [-i input.RData] [-o out.RData]"
)
renv::install(argparse)
renv::install("argparse")
library(xml2)
library(argparse)
parser <- argparse(
description = "Example command-line option parser",
usage = "%prog <filename> [-i input.RData] [-o out.RData]"
)
options(repos = c(CRAN = "https://cloud.r-project.org"))
packages <- c("xml2", "argparse")
for (pack in packages) {
if (!require(pack)) {
install.packages(pack)
}
}
library(xml2)
library(argparse)
argparse::ArgumentParser()
renv::remove("argparse")
renv::install("optparse")
detach("package:argparse", unload = TRUE)
remove.packages("argparse")
library("optparse")
options(repos = c(CRAN = "https://cloud.r-project.org"))
packages <- c("xml2", "optparse")
for (pack in packages) {
if (!require(pack)) {
install.packages(pack)
}
}
library(xml2)
library(argparse)
library(optparse)
library(optparse)
PREFIX <- "df"
EXTENSION <- ".RData"
options(repos = c(CRAN = "https://cloud.r-project.org"))
packages <- c("xml2", "optparse")
for (pack in packages) {
if (!require(pack)) {
install.packages(pack)
}
}
library(xml2)
library(optparse)
PREFIX <- "df"
EXTENSION <- ".RData"
option_list <- list(
make_option(c("-i", "--input"), type = "character", help = "Append results to existing .RData file", default = NULL),
make_option(c("-o", "--output"), type = "character", help = "Output RData file", default = NULL)
)
parser <- OptionParser(
usage = "%prog <FILENAME> [OPTIONS", option_list = option_list)
args <- parse_args(parser, positional_arguments = 1)
main <- function() {
option_list <- list(
make_option(c("-i", "--input"), type = "character", help = "Append results to existing .RData file", default = NULL),
make_option(c("-o", "--output"), type = "character", help = "Output RData file", default = NULL)
)
parser <- OptionParser(
usage = "%prog <FILENAME> [OPTIONS", option_list = option_list)
args <- parse_args(parser, positional_arguments = 1)
paths <- prepare_paths_for_parsing(args$args[[1]])
df <- generate_df(paths)
# Parse other CLI arguments
fname <-
sprintf("%s%s%s",
format(Sys.time(), "%Y-%m-%d_%H%M%S"),
PREFIX,
EXTENSION)
save(df, file = fname)
}
prepare_paths_for_parsing <-
function(args, valid_extensions = c("xml")) {
#` Checks for the existence of a file presented in argument.
#` If it's a txt or list file, assumes it's a list of paths,
#` checks validity of each path as xml file and adds them to the list of paths.
#` If it's an xml file, checks for it validity and adds it to the list of paths.
#` If at any point it encounters invalid path, it prompts user to continue by pressing (y)es
#` or stops the program if person pressed (n)o.
#`
#` Function returns vector of strings representing paths to be parsed
paths <- c()
if (file.exists(args)) {
extension <- tools::file_ext(args[1])
if (extension %in% valid_extensions) {
paths <- c(paths, args)
}
else if (extension == "txt" || extension == "list") {
list_ <- readLines(args)
for (el in list_) {
valid_path <- prepare_paths_for_parsing(el)
paths <- c(paths, valid_path)
}
}
} else {
warning <- sprintf("File doesn't exist or can't be parsed: %s\n")
print(warning)
to_continue <-
readline(prompt = "Do you want to quit the program to fix names?\n(y)es - quits the program, (n)o - proceeds, skipping invalid file")
# TODO: implement branching logic
}
}
xml_parse <- function(path) {
# ...
msg <- sprintf("Now parsing: %s.", path)
print(msg)
in_file <- read_xml(path)
# Get experiment name from XML
experiment_name <- xml_text(xml_child(xml_child(in_file,
search = "Image_Properties"),
search = "Image_Filename"))
# Get list of markers from XML
markers <-
xml_find_all(xml_child(in_file, search = "Marker_Data"), ".//Marker_Type")
marker_names <- c()
cell_count <- c()
for (marker in markers) {
marker_names <-
c(marker_names, xml_text(xml_child(marker, search = "Name")))
cell_count <-
c(cell_count, length(xml_find_all(marker, ".//Marker")))
marked_counts <- setNames(cell_count, marker_names)
}
# Create dataframe
df <- data.frame(t(marked_counts))
rownames(df) <- experiment_name
return(df)
}
generate_df <- function(paths) {
df <- data.frame()
for (path in paths) {
addition <- xml_parse(path)
df <- rbind(df, addition)
}
return(df)
}
RScript
load("~/3_Efforts/xml-parser-nico/xml-parser-nico/2024-06-08_014356df.RData")
View(df)
View(df)
while (!(proceed %in% c("y", "yes", "n", "no"))) {
proceed <-
readline(prompt = "Proceed?\n(y)es - replace existing file, (n)o - fallback to timestamp naming: ")
if (proceed %in% c("y", "yes")) {
fname <- output_file
} else if (proceed %in% c("n", "no")) {
break
}
}
response <- ""
}
while (response != "y") {
response <- readline(prompt = "press enter to continue or 'y' to exit: ")
}
source("~/3_Efforts/xml-parser-nico/xml-parser-nico/xml-parser.R")
name <- readline(prompt = "what's your name?")
source("~/3_Efforts/xml-parser-nico/xml-parser-nico/UntitledR.R")
load("~/3_Efforts/xml-parser-nico/xml-parser-nico/merged.RData")
View(df)
View(df)
load("~/3_Efforts/xml-parser-nico/xml-parser-nico/result.RData")
View(df)
View(df)
load("~/3_Efforts/xml-parser-nico/xml-parser-nico/result2.RData")
View(df)
View(df)
load("~/3_Efforts/xml-parser-nico/xml-parser-nico/result.RData")
View(df)
load("~/3_Efforts/xml-parser-nico/xml-parser-nico/2024-06-08_023537df.RData")
View(df)
View(df)
input_file <- args$options$input
source("~/3_Efforts/xml-parser-nico/xml-parser-nico/UntitledR.R")
input_file <- result2.RData
input_file <- "result2.RData"
load(input_file)
View(df)
View(df)
load("~/3_Efforts/xml-parser-nico/xml-parser-nico/2024-06-08_024258df.RData")
View(df)
View(df)
load("~/3_Efforts/xml-parser-nico/xml-parser-nico/2024-06-08_024618df.RData")
View(df)
View(df)
load("~/3_Efforts/xml-parser-nico/xml-parser-nico/result.RData")
load("~/3_Efforts/xml-parser-nico/xml-parser-nico/2024-06-08_024258df.RData")
load("~/3_Efforts/xml-parser-nico/xml-parser-nico/result.RData")
load("~/3_Efforts/xml-parser-nico/xml-parser-nico/result2.RData")
load(input_file)
# Parse other CLI arguments
if (!is.null(input_file) &&
file.exists(input_file) &&
tools::file_ext(input_file) == "RData") {
load(input_file)
df <- rbind(df, input_file)
}
df_old <- load(input_file)
df <- rbind(df_old, df)
View(df)
View(df)
df_old <- load(input_file)
df <- generate_df(paths)
paths <- prepare_paths_for_parsing(args$args[[1]])
input_file <-
d
load("~/3_Efforts/xml-parser-nico/xml-parser-nico/2024-06-08_025127df.RData")
View(df)
View(df)
df_old <- load(input_file)
load("~/3_Efforts/xml-parser-nico/xml-parser-nico/2024-06-08_025206df.RData")
load("~/3_Efforts/xml-parser-nico/xml-parser-nico/2024-06-08_025206df.RData")
View(df)
View(df)
load("~/3_Efforts/xml-parser-nico/xml-parser-nico/2024-06-08_025246df.RData")
View(df)
View(df)
df <- load(result.RData)
df <- load("result.RData")
load("~/3_Efforts/xml-parser-nico/xml-parser-nico/result.RData")
View(df)
View(df)
df <- get(df, load("result.RData"))
load(result.RData)
load("result.RData")
load("result.RData")
View(df)
View(df)
load("result2.RData")
View(df)
View(df)
load("result.RData")
View(df)
View(df)
df_new <- df
load("result2.RData")
View(df)
View(df)
View(df_new)
View(df_new)
df <- rbind(df, df_new)
View(df)
View(df)
load("~/3_Efforts/xml-parser-nico/xml-parser-nico/results2.RData")
View(df)
View(df)
load("~/3_Efforts/xml-parser-nico/xml-parser-nico/results.RData")
View(df)
View(df)
load("~/3_Efforts/xml-parser-nico/xml-parser-nico/out.RData")
View(df)
View(df)
list_ <- readlines("some_file.txt")
list_ <- readLines("some_file.txt")
print(list_)
print(file.exists(list_[1]))
extension <- tools::file_ext(list_[1])
load("~/3_Efforts/xml-parser-nico/xml-parser-nico/out.RData")
View(df)
View(df)
load("~/3_Efforts/xml-parser-nico/xml-parser-nico/out.RData")
View(df)
View(df)
load("~/3_Efforts/xml-parser-nico/xml-parser-nico/out.RData")
View(df)
load("~/3_Efforts/xml-parser-nico/xml-parser-nico/out.RData")
View(df)
View(df)
